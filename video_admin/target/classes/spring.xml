<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/aop
	   http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
	   http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util-4.2.xsd">

    <!--    spring的注解开发：组件扫描（类上注解：可以在直接使用属性注入注解）-->
    <context:component-scan base-package="com.xhl">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 自动创建代理 对@AspectJ注解的支持 -->
    <!-- 通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Service -->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>

    <bean id="sid" class="org.n3r.idworker.Sid"></bean>

    <!--    引用属性配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--    配置Spring的内置连接池，使用外部属性文件jdbc.properties-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!--        属性注入-->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="30" />
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="5" />
        <!-- 用于显示数据源监控中的sql语句监控 -->
        <property name="filters" value="stat" />

    </bean>

<!--    配置SqlSessionFactory-->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
<!--        配置mybatis核心配置文件-->
        <property name="configLocation" value="classpath:SqlMapConfig.xml"/>
<!--        配置数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    Mapper代理的方式开发方式二，扫描包方式配置代理-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
<!--        配置mapper接口-->
        <property name="basePackage" value="com.xhl.mapper"/>
    </bean>


    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 传播行为 -->
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="display*" propagation="REQUIRED" />
            <tx:method name="do*" propagation="REQUIRED" />
            <tx:method name="query*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!-- 切面 -->
    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.xhl.service..*.*(..))" />
    </aop:config>

<!--    <description>zookeeper 放入spring容器，项目启动加载时建立和zk的链接</description>-->
    <!-- 创建重连策略 -->
<!--    <bean id="retryPolicy" class="org.apache.curator.retry.ExponentialBackoffRetry">-->
<!--        &lt;!&ndash; 每次重连的等待时间 1秒 &ndash;&gt;-->
<!--        <constructor-arg index="0" value="1000"></constructor-arg>-->
<!--        &lt;!&ndash; 设置的重连次数 5次 &ndash;&gt;-->
<!--        <constructor-arg index="1" value="5"></constructor-arg>-->
<!--    </bean>-->

<!--    &lt;!&ndash; 创建zk客户端 &ndash;&gt;-->
<!--    <bean id = "client" class="org.apache.curator.framework.CuratorFrameworkFactory" factory-method="newClient" init-method="start">-->
<!--        <constructor-arg index="0" value="192.168.13.236:2181"></constructor-arg>-->
<!--        <constructor-arg index="1" value="10000"></constructor-arg>-->
<!--        <constructor-arg index="2" value="10000"></constructor-arg>-->
<!--        <constructor-arg index="3" ref="retryPolicy"></constructor-arg>-->
<!--    </bean>-->

    <!-- 客户端配置 -->
<!--    <bean id = "ZKCurator" class="com.imooc.web.util.ZKCurator" init-method="init">-->
<!--        <constructor-arg index="0" ref="client"></constructor-arg>-->
<!--    </bean>-->

</beans>